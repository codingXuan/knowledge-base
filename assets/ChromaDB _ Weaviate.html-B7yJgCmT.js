import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as t,o as i}from"./app-CPZX_RV9.js";const e={};function l(r,n){return i(),a("div",null,n[0]||(n[0]=[t(`<p><strong>1. 核心定位：为开发者设计的、开源的嵌入式向量数据库</strong></p><p>ChromaDB（通常简称Chroma）的设计哲学是<strong>简单、易用、开箱即用</strong>。它极大地降低了开发者使用向量数据库的门槛，非常适合快速原型设计、中小型项目以及作为应用的内置（embedded）向量存储引擎。</p><p><strong>2. 核心特性</strong></p><ul><li><strong>API优先</strong>：提供了简洁、直观的Python和JavaScript/TypeScript客户端。</li><li><strong>嵌入式与客户端-服务器模式</strong>： <ul><li><strong>嵌入式 (In-Memory)</strong>：无需安装任何独立的数据库服务，可以直接在您的Python代码中运行，数据默认存储在内存或本地磁盘，非常适合本地开发和测试。</li><li><strong>客户端-服务器</strong>：也可以作为独立的服务器运行，让多个应用通过网络连接和访问。</li></ul></li><li><strong>元数据与过滤</strong>：这是它相比Faiss的一大优势。在存储向量的同时，可以存入丰富的元数据（如文档来源、作者、日期等），并在查询时根据这些元数据进行<strong>前置或后置过滤</strong>，实现更精确的检索。</li><li><strong>与生态的集成</strong>：与LangChain、LlamaIndex等框架深度集成，可以无缝替换。</li></ul><p><strong>3. 适用场景</strong></p><ul><li>快速启动新的AIGC项目和原型验证。</li><li>中小型规模的应用（数据量在百万级别以下）。</li><li>桌面应用或需要内置向量搜索功能的场景。</li><li>AI学习和研究。</li></ul><p><strong>4. Python代码示例</strong></p><p>Python</p><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-plain"><span class="line"><span>import chromadb</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 1. 初始化ChromaDB客户端</span></span>
<span class="line"><span># 这是一个嵌入式（本地持久化）的例子，数据会保存在 ./chroma_db 文件夹中</span></span>
<span class="line"><span>client = chromadb.PersistentClient(path=&quot;./chroma_db&quot;) </span></span>
<span class="line"><span></span></span>
<span class="line"><span># 或者，创建一个纯内存的客户端</span></span>
<span class="line"><span># client = chromadb.Client()</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 2. 创建或获取一个&quot;Collection&quot;（类似于数据库中的一张表）</span></span>
<span class="line"><span>collection = client.get_or_create_collection(name=&quot;my_document_collection&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 3. 添加文档、Embedding（向量）和元数据</span></span>
<span class="line"><span>collection.add(</span></span>
<span class="line"><span>    embeddings=[ # 这里应该是您用BGE等模型生成的向量</span></span>
<span class="line"><span>        [1.2, 2.3, 4.5],</span></span>
<span class="line"><span>        [6.7, 8.2, 9.2]</span></span>
<span class="line"><span>    ],</span></span>
<span class="line"><span>    documents=[&quot;这是第一份文档，关于ChromaDB。&quot;, &quot;这是第二份文档，关于向量数据库。&quot;],</span></span>
<span class="line"><span>    metadatas=[{&quot;source&quot;: &quot;doc1&quot;}, {&quot;source&quot;: &quot;doc2&quot;}],</span></span>
<span class="line"><span>    ids=[&quot;id1&quot;, &quot;id2&quot;] # 每个条目必须有唯一的ID</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 4. 执行查询</span></span>
<span class="line"><span>query_embedding = [1.1, 2.4, 4.6] # 模拟一个查询向量</span></span>
<span class="line"><span>results = collection.query(</span></span>
<span class="line"><span>    query_embeddings=[query_embedding],</span></span>
<span class="line"><span>    n_results=1 # 返回最相似的1个结果</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>print(results)</span></span>
<span class="line"><span># 输出: {&#39;ids&#39;: [[&#39;id1&#39;]], &#39;distances&#39;: [[0.0200...]], &#39;metadatas&#39;: [[{&#39;source&#39;: &#39;doc1&#39;}]], &#39;embeddings&#39;: None, &#39;documents&#39;: [[&#39;这是第一份文档，关于ChromaDB。&#39;]]}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="part-2-weaviate-向量检索领域的-elasticsearch" tabindex="-1"><a class="header-anchor" href="#part-2-weaviate-向量检索领域的-elasticsearch"><span><strong>Part 2: Weaviate - 向量检索领域的“Elasticsearch”</strong></span></a></h4><p><strong>1. 核心定位：为生产环境设计的、功能丰富的、可扩展的开源向量数据库</strong></p><p>Weaviate是一个功能极其强大的向量数据库，它的设计目标是应对大规模、高并发的生产级应用。它不仅提供了强大的向量搜索能力，还集成了传统数据库的许多高级功能。</p><p><strong>2. 核心特性</strong></p><ul><li><strong>混合搜索 (Hybrid Search)</strong>：这是Weaviate的王牌功能之一。它能够将<strong>向量搜索（语义相关性）和传统的关键词搜索（BM25算法，词法相关性）智能地结合在一起</strong>，返回的结果既考虑了文本的深层含义，又兼顾了关键词的精确匹配，极大地提升了检索质量。</li><li><strong>GraphQL &amp; RESTful APIs</strong>：提供了灵活且强大的API接口，便于不同语言的应用进行集成。</li><li><strong>内置模块化设计</strong>：Weaviate可以将Embedding模型（如Hugging Face模型、OpenAI模型等）作为其内部的一个模块来运行。这意味着您可以直接向Weaviate插入文本，<strong>由Weaviate自动为您完成文本的向量化</strong>，简化了开发流程。</li><li><strong>数据对象与交叉引用</strong>：Weaviate不仅存储向量，还存储结构化的数据对象，并且可以在对象之间建立类似知识图谱的“交叉引用”，实现更复杂的关联查询。</li><li><strong>生产级架构</strong>：专为可扩展性、高可用性和高并发设计，支持分布式部署。</li></ul><p><strong>3. 适用场景</strong></p><ul><li>大规模、数据量巨大（千万到亿级别）的生产级RAG系统。</li><li>需要混合搜索来提升检索精准度的应用。</li><li>需要处理结构化数据与非结构化数据，并建立它们之间关联的复杂系统。</li><li>希望将向量化过程也交由数据库管理的场景。</li></ul><hr><h4 id="_3-faiss-vs-chromadb-vs-weaviate-如何选择" tabindex="-1"><a class="header-anchor" href="#_3-faiss-vs-chromadb-vs-weaviate-如何选择"><span><strong>3. Faiss vs. ChromaDB vs. Weaviate：如何选择</strong></span></a></h4><table><thead><tr><th>特性</th><th><strong>Faiss (库)</strong></th><th><strong>ChromaDB (数据库)</strong></th><th><strong>Weaviate (数据库)</strong></th></tr></thead><tbody><tr><td><strong>定位</strong></td><td>高性能<strong>算法库</strong></td><td>易用的<strong>嵌入式/中小型数据库</strong></td><td>生产级的<strong>大规模、全功能数据库</strong></td></tr><tr><td><strong>核心功能</strong></td><td>向量相似度搜索</td><td>向量搜索 + <strong>元数据存储与过滤</strong></td><td>向量搜索 + <strong>混合搜索</strong> + <strong>内置向量化</strong> + 图关联</td></tr><tr><td><strong>数据管理</strong></td><td>手动管理</td><td>自动CRUD, 持久化</td><td>自动CRUD, 持久化, Schema管理</td></tr><tr><td><strong>部署</strong></td><td>集成在代码中</td><td>嵌入式或独立服务</td><td>独立服务, 支持分布式</td></tr><tr><td><strong>适合场景</strong></td><td>需要极致搜索性能的底层实现</td><td><strong>快速原型, 中小型项目, 本地应用</strong></td><td><strong>大型生产系统, 复杂检索需求</strong></td></tr></tbody></table><p><strong>总结</strong>：这三者代表了向量检索技术栈的不同层次。当需要从零开始、完全控制每一个细节时，可以选择<strong>Faiss</strong>作为算法引擎。当需要快速启动一个项目，并拥有基本的数据库功能时，<strong>ChromaDB</strong>是最佳选择。而当应用走向成熟，需要应对海量数据和复杂查询，并追求极致的检索效果时，功能更全面的<strong>Weaviate</strong>则是最终归宿。</p>`,21)]))}const d=s(e,[["render",l]]),c=JSON.parse('{"path":"/tech/AIGC%E6%A1%86%E6%9E%B6%E8%AF%A6%E8%A7%A3/RAG%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/ChromaDB%20_%20Weaviate.html","title":"ChromaDB _ Weaviate","lang":"zh-CN","frontmatter":{"title":"ChromaDB _ Weaviate","date":"2025-05-12T00:00:00.000Z"},"git":{"createdTime":1753758135000,"updatedTime":1754299079000,"contributors":[{"name":"codingXuan","username":"codingXuan","email":"34129858+codingXuan@users.noreply.github.com","commits":4,"url":"https://github.com/codingXuan"}]},"readingTime":{"minutes":4.66,"words":1398},"filePathRelative":"tech/AIGC框架详解/RAG核心组件/向量数据库/ChromaDB _ Weaviate.md","excerpt":"<p><strong>1. 核心定位：为开发者设计的、开源的嵌入式向量数据库</strong></p>\\n<p>ChromaDB（通常简称Chroma）的设计哲学是<strong>简单、易用、开箱即用</strong>。它极大地降低了开发者使用向量数据库的门槛，非常适合快速原型设计、中小型项目以及作为应用的内置（embedded）向量存储引擎。</p>\\n<p><strong>2. 核心特性</strong></p>\\n<ul>\\n<li><strong>API优先</strong>：提供了简洁、直观的Python和JavaScript/TypeScript客户端。</li>\\n<li><strong>嵌入式与客户端-服务器模式</strong>：\\n<ul>\\n<li><strong>嵌入式 (In-Memory)</strong>：无需安装任何独立的数据库服务，可以直接在您的Python代码中运行，数据默认存储在内存或本地磁盘，非常适合本地开发和测试。</li>\\n<li><strong>客户端-服务器</strong>：也可以作为独立的服务器运行，让多个应用通过网络连接和访问。</li>\\n</ul>\\n</li>\\n<li><strong>元数据与过滤</strong>：这是它相比Faiss的一大优势。在存储向量的同时，可以存入丰富的元数据（如文档来源、作者、日期等），并在查询时根据这些元数据进行<strong>前置或后置过滤</strong>，实现更精确的检索。</li>\\n<li><strong>与生态的集成</strong>：与LangChain、LlamaIndex等框架深度集成，可以无缝替换。</li>\\n</ul>"}');export{d as comp,c as data};
