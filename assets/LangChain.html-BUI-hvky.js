import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as i,o as e}from"./app-xpmwNhq3.js";const o={};function t(l,n){return e(),a("div",null,n[0]||(n[0]=[i(`<h4 id="_1-核心定位-aigc应用开发的-spring-boot" tabindex="-1"><a class="header-anchor" href="#_1-核心定位-aigc应用开发的-spring-boot"><span><strong>1. 核心定位：AIGC应用开发的“Spring Boot”</strong></span></a></h4><p>如果说PyTorch是让我们能“造出”高性能发动机（LLM）的底层工具集，那么LangChain就是一套能让我们快速“组装”出一辆功能完备的汽车（AIGC应用）的<strong>应用层开发框架</strong>。</p><p>它通过提供一系列标准化的、可组合的组件，极大地简化了构建复杂AIGC应用（如RAG、Agents）的过程，其核心哲学与Spring Boot如出一辙：<strong>约定优于配置、快速开发、功能集成</strong>。</p><h4 id="_2-langchain的核心封装模块" tabindex="-1"><a class="header-anchor" href="#_2-langchain的核心封装模块"><span><strong>2. LangChain的核心封装模块</strong></span></a></h4><p>LangChain的强大之处在于它将一个复杂的AIGC应用拆解成了若干个标准化的核心模块，并对每个模块的复杂实现进行了封装。</p><p><strong>A. 模型输入/输出 (Models I/O)</strong></p><ul><li><strong>它封装了什么？</strong>：封装了与各种大语言模型（无论是OpenAI的API，还是本地部署的Qwen）进行交互的复杂细节。</li><li><strong>提供了什么？</strong>： <ul><li><code>**LLMs**</code>：针对文本补全模型的标准接口。</li><li><code>**ChatModels**</code>：针对聊天模型的标准接口。</li><li><code>**Prompts**</code>：强大的提示词模板工具，支持变量替换、动态组合等。</li><li><code>**Output Parsers**</code>：用于将LLM返回的纯文本字符串，自动解析成结构化的数据（如JSON、列表）。</li></ul></li></ul><p><strong>B. 数据连接 (Data Connection)</strong></p><ul><li><strong>它封装了什么？</strong>：封装了构建RAG（检索增强生成）流程中所有与数据相关的繁琐操作。</li><li><strong>提供了什么？</strong>： <ul><li><code>**Document Loaders**</code>：从各种数据源（PDF, TXT, Web, Notion等）加载文档。</li><li><code>**Text Splitters**</code>：将长文档切分成适合Embedding的、有意义的小文本块。</li><li><code>**Embeddings**</code>：提供了调用各种Embedding模型（开源或API）的统一接口。</li><li><code>**Vector Stores**</code>：提供了与各种向量数据库（FAISS, Milvus, ChromaDB等）进行交互的统一接口。</li></ul></li></ul><p><strong>C. 链 (Chains)</strong></p><ul><li><strong>它封装了什么？</strong>：这是LangChain的<strong>核心思想</strong>。它封装了将多个组件“链接”在一起执行的调用逻辑。</li><li><strong>提供了什么？</strong>： <ul><li><strong>简单的顺序链</strong>：例如，一个<code>LLMChain</code>可以将一个Prompt模板、一个LLM和一个输出解析器串联起来，一步到位地实现“格式化输入 -&gt; 调用模型 -&gt; 结构化输出”的流程。</li><li><strong>LangChain表达式语言 (LCEL)</strong>：这是现代LangChain的<strong>精髓</strong>。它提供了一种极其优雅和强大的方式，可以用类似管道符<code>|</code>的语法，将任意组件自由地组合在一起，构建出从简单到复杂的逻辑流，并自动支持流式输出、并行执行和日志记录。</li></ul></li></ul><p><strong>D. 智能体 (Agents)</strong></p><ul><li><strong>它封装了什么？</strong>：封装了实现Agent所必需的、复杂的“思考-行动”循环（ReAct框架）。</li><li><strong>提供了什么？</strong>： <ul><li><code>**Tools**</code>：一个标准化的接口，用于将任意函数或API（如“查询天气”、“计算器”）封装成可供Agent调用的工具。</li><li><code>**AgentExecutor**</code>：这是Agent的“大脑”和“执行器”。您只需要给它一个LLM和一套工具，它就能自动地进行推理、选择工具、执行工具、观察结果，并循环往复直到完成任务。开发者无需手动编写这个复杂的循环逻辑。</li></ul></li></ul><p><strong>E. 记忆 (Memory)</strong></p><ul><li><strong>它封装了什么？</strong>：封装了在多轮对话中管理和存储历史记录的状态管理逻辑。</li><li><strong>提供了什么？</strong>：提供了多种开箱即用的记忆类型，如<code>ConversationBufferMemory</code>（保存所有历史）、<code>ConversationSummaryMemory</code>（自动将历史总结成摘要）等。</li></ul><h4 id="_3-lcel示例-感受langchain的-封装之美" tabindex="-1"><a class="header-anchor" href="#_3-lcel示例-感受langchain的-封装之美"><span><strong>3. LCEL示例：感受LangChain的“封装之美”</strong></span></a></h4><p>LangChain表达式语言（LCEL）最能体现其“Spring Boot”式的封装哲学。</p><p>Python</p><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-plain"><span class="line"><span>from langchain_openai import ChatOpenAI</span></span>
<span class="line"><span>from langchain_core.prompts import ChatPromptTemplate</span></span>
<span class="line"><span>from langchain_core.output_parsers import StrOutputParser</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 1. 定义组件</span></span>
<span class="line"><span>prompt = ChatPromptTemplate.from_template(&quot;请为产品 {product} 写一句广告语。&quot;)</span></span>
<span class="line"><span>model = ChatOpenAI(model=&quot;gpt-4o&quot;)</span></span>
<span class="line"><span>output_parser = StrOutputParser()</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 2. 使用LCEL的管道符 | 将组件链接起来，形成一个“链”</span></span>
<span class="line"><span># 这条链封装了：获取输入 -&gt; 格式化Prompt -&gt; 调用模型 -&gt; 解析输出 的完整流程</span></span>
<span class="line"><span>chain = prompt | model | output_parser</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 3. 像调用一个普通函数一样执行整个流程</span></span>
<span class="line"><span>slogan = chain.invoke({&quot;product&quot;: &quot;智能咖啡机&quot;})</span></span>
<span class="line"><span></span></span>
<span class="line"><span>print(slogan) </span></span>
<span class="line"><span># 输出可能类似于: &quot;智能唤醒，一键醇香。您的专属咖啡大师。&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，所有API调用的细节、Prompt的格式化、结果的解析都被隐藏在了<code>chain</code>这个对象之后，开发者只需关注业务本身（输入一个产品，得到一句广告语）。</p><h4 id="_4-总结-langchain的角色与价值" tabindex="-1"><a class="header-anchor" href="#_4-总结-langchain的角色与价值"><span><strong>4. 总结：LangChain的角色与价值</strong></span></a></h4><p>LangChain在AIGC生态中的角色，就是一个<strong>高效的应用层“粘合剂”和“开发加速器”</strong>。它让开发者可以从繁琐的底层实现中解放出来，用更少的代码、更快的速度，将各种模型、工具和数据源组合起来，构建出功能强大的AIGC应用。这与Spring Boot让Java开发者能快速构建健壮的企业级应用的价值定位，是完全一致的。</p>`,22)]))}const c=s(o,[["render",t]]),g=JSON.parse('{"path":"/tech/AIGC%E6%A1%86%E6%9E%B6%E8%AF%A6%E8%A7%A3/%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/%E5%BA%94%E7%94%A8%E7%BC%96%E6%8E%92%E6%A1%86%E6%9E%B6/LangChain.html","title":"LangChain","lang":"zh-CN","frontmatter":{"title":"LangChain","date":"2024-10-11T00:00:00.000Z"},"git":{"createdTime":1753758135000,"updatedTime":1753843586000,"contributors":[{"name":"codingXuan","username":"codingXuan","email":"34129858+codingXuan@users.noreply.github.com","commits":3,"url":"https://github.com/codingXuan"}]},"readingTime":{"minutes":4.12,"words":1236},"filePathRelative":"tech/AIGC框架详解/基础框架/应用编排框架/LangChain.md","excerpt":"<h4><strong>1. 核心定位：AIGC应用开发的“Spring Boot”</strong></h4>\\n<p>如果说PyTorch是让我们能“造出”高性能发动机（LLM）的底层工具集，那么LangChain就是一套能让我们快速“组装”出一辆功能完备的汽车（AIGC应用）的<strong>应用层开发框架</strong>。</p>\\n<p>它通过提供一系列标准化的、可组合的组件，极大地简化了构建复杂AIGC应用（如RAG、Agents）的过程，其核心哲学与Spring Boot如出一辙：<strong>约定优于配置、快速开发、功能集成</strong>。</p>\\n<h4><strong>2. LangChain的核心封装模块</strong></h4>"}');export{c as comp,g as data};
